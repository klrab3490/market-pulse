from fastapi import FastAPI, Query
from fastapi.middleware.cors import CORSMiddleware
from datetime import date

# Importing Custom Modules
from momentum import get_momentum
from news import get_news
from llm import get_market_pulse
from cache import get_cached_response
from fastapi import HTTPException

app = FastAPI()

# âœ… Allow CORS for frontend on localhost:3000 and production source
app.add_middleware(
    CORSMiddleware,
    allow_origins = [
        "https://market-pulse-murex.vercel.app",
        "http://localhost:3000"
    ],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/")
async def root():
    """
    Root endpoint.
    """
    return {"message": "Welcome to the Market Pulse API"}

@app.get("/api/v1/market-pulse")
async def market_pulse(ticker: str = Query(..., min_length=1)):
    """
    Fetches and returns the market pulse for a given ticker symbol.
    This endpoint checks for a cached response first. If not found, it fetches momentum and news data,
    generates a market pulse and explanation using an LLM, caches the result, and returns the response.

    Args:
        ticker (str): The stock ticker symbol to analyze. Must be at least 1 character long.

    Returns:

        dict: A dictionary containing:

            - ticker (str): The uppercase ticker symbol.
            - as_of (str): The date of the response.
            - momentum (Any): The momentum data for the ticker.
            - news (Any): The news data for the ticker.
            - pulse (Any): The market pulse generated by the LLM.
            - llm_explanation (Any): The explanation generated by the LLM.

    Example:

        GET: /market_pulse?ticker=AAPL

        Response:
        {
            "ticker": "AAPL",
            "as_of": "2024-06-10",
            "momentum": {...},
            "news": [...],
            "pulse": "Bullish",
            "llm_explanation": "Based on recent momentum and news, the outlook is positive."
        }
    """

    # Basic validation: ticker must be alphanumeric and reasonable length
    if not ticker.isalnum() or len(ticker) > 10:
        raise HTTPException(status_code=400, detail="Invalid ticker symbol. Must be alphanumeric and <= 10 characters.")

    # Check in-memory cache
    cached = get_cached_response(ticker)
    if cached:
        return cached

    # Fetch signals
    momentum = await get_momentum(ticker)
    if momentum is None:
        raise HTTPException(status_code=404, detail="Momentum data not found for ticker.")

    news = await get_news(ticker)
    if news is None:
        raise HTTPException(status_code=404, detail="News data not found for ticker.")

    # Get LLM output
    pulse, explanation = await get_market_pulse(ticker, momentum, news)
    if pulse is None or explanation is None:
        raise HTTPException(status_code=500, detail="Failed to generate market pulse.")

    response = {
        "ticker": ticker.upper(),
        "as_of": str(date.today()),
        "momentum": momentum,
        "news": news,
        "pulse": pulse,
        "llm_explanation": explanation
    }

    # Store in cache
    get_cached_response(ticker, response)

    return response